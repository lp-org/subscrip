{
  // Place your my-turborepo workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "drizzle transaction": {
    "prefix": "dbt",
    "body": ["this.db_.transaction(async (tx) => {", "	$1				", "})"],
    "description": "drizzle transaction"
  },
  "Service controller": {
    "prefix": "clssvc",
    "body": [
      "import { PgJsDatabaseType } from \"db\";",
      "import { RESOLVER } from \"awilix\";",
      "import { CurrentStore } from \"../types\";",
      "type InjectedDependencies = {",
      "  db: PgJsDatabaseType;",
      "  currentStore: CurrentStore;",
      "};",
      "export default class $1Service {",
      "  static [RESOLVER] = {};",
      "  protected readonly db_: PgJsDatabaseType;",
      "  protected readonly currentStore_: CurrentStore;",
      "  constructor({ db, currentStore }: InjectedDependencies) {",
      "    this.db_ = db;",
      "    this.currentStore_ = currentStore;",
      "  }",
      "}",
      ""
    ],
    "description": "Service controller"
  },

  "Api class": {
    "prefix": "clsapi",
    "body": [
      "import { route } from \"awilix-express\";",
      "import { Request, Response } from \"express\";",
      "import $1Service from \"../../services/$1Service\";",
      "",
      "type InjectedDependencies = {",
      "  $2Service: $1Service;",
      "};",
      "",
      "@route(\"/$2\")",
      "export default class $1Api {",
      "  protected readonly $2Service_: $1Service;",
      "  constructor({ $2Service }: InjectedDependencies) {",
      "    this.$2Service_ = $2Service;",
      "  }",
      "",
      "  @route(\"/\")",
      "  async get(req: Request, res: Response) {}",
      "}",
      ""
    ],
    "description": "Api class"
  }
}
